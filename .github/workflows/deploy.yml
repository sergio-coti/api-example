name: Deploy to AWS Elastic Beanstalk

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Spring Boot Application
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up JDK 17 (Spring Boot 3.3.3 supports JDK 17)
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Build the project using Maven
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # Step 4: List files in target directory (to check if the JAR was generated)
      - name: List files in target directory
        run: ls -la target

      # Step 5: Upload the built JAR as an artifact for use in the deploy step
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v3
        with:
          name: api-application
          path: target/*.jar  # Usando wildcard para capturar o JAR

  deploy:
    name: Deploy to AWS Elastic Beanstalk
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Step 1: Checkout code again (necessary for deployment)
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Download the JAR artifact built in the previous job
      - name: Download JAR artifact
        uses: actions/download-artifact@v3
        with:
          name: api-application

      # Step 3: Deploy to Elastic Beanstalk using the jar file
      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: Apiexample  # Substitua pelo nome da sua aplicação no EB
          environment_name: Apiexample-env  # Substitua pelo nome do ambiente no EB
          region: us-east-1                        # Substitua pela região do AWS
          deployment_package: target/*.jar  # Usando wildcard para capturar o JAR
          version_label: ${{ github.sha }}         # Rótulo de versão único baseado no hash do commit

      # Step 4: Clean up artifacts
      - name: Clean up
        run: rm -f target/*.jar
